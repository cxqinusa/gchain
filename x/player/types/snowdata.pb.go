// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gchain/player/snowdata.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Snowdata struct {
	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Health   int32  `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	Fighting int32  `protobuf:"varint,3,opt,name=fighting,proto3" json:"fighting,omitempty"`
}

func (m *Snowdata) Reset()         { *m = Snowdata{} }
func (m *Snowdata) String() string { return proto.CompactTextString(m) }
func (*Snowdata) ProtoMessage()    {}
func (*Snowdata) Descriptor() ([]byte, []int) {
	return fileDescriptor_17f47d336ef92815, []int{0}
}
func (m *Snowdata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snowdata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snowdata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snowdata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snowdata.Merge(m, src)
}
func (m *Snowdata) XXX_Size() int {
	return m.Size()
}
func (m *Snowdata) XXX_DiscardUnknown() {
	xxx_messageInfo_Snowdata.DiscardUnknown(m)
}

var xxx_messageInfo_Snowdata proto.InternalMessageInfo

func (m *Snowdata) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Snowdata) GetHealth() int32 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *Snowdata) GetFighting() int32 {
	if m != nil {
		return m.Fighting
	}
	return 0
}

func init() {
	proto.RegisterType((*Snowdata)(nil), "gchain.player.Snowdata")
}

func init() { proto.RegisterFile("gchain/player/snowdata.proto", fileDescriptor_17f47d336ef92815) }

var fileDescriptor_17f47d336ef92815 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0x4f, 0xce, 0x48,
	0xcc, 0xcc, 0xd3, 0x2f, 0xc8, 0x49, 0xac, 0x4c, 0x2d, 0xd2, 0x2f, 0xce, 0xcb, 0x2f, 0x4f, 0x49,
	0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x85, 0xc8, 0xea, 0x41, 0x64, 0x95,
	0x22, 0xb8, 0x38, 0x82, 0xa1, 0x0a, 0x84, 0x24, 0xb8, 0xd8, 0x13, 0x53, 0x52, 0x8a, 0x52, 0x8b,
	0x8b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x21, 0x31, 0x2e, 0xb6, 0x8c, 0xd4,
	0xc4, 0x9c, 0x92, 0x0c, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x28, 0x4f, 0x48, 0x8a, 0x8b,
	0x23, 0x2d, 0x33, 0x3d, 0xa3, 0x24, 0x33, 0x2f, 0x5d, 0x82, 0x19, 0x2c, 0x03, 0xe7, 0x3b, 0xe9,
	0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb,
	0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x28, 0xd4, 0x81, 0x15, 0x30,
	0x27, 0x96, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x1d, 0x68, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x4c, 0x8c, 0x25, 0x93, 0xc0, 0x00, 0x00, 0x00,
}

func (m *Snowdata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snowdata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snowdata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fighting != 0 {
		i = encodeVarintSnowdata(dAtA, i, uint64(m.Fighting))
		i--
		dAtA[i] = 0x18
	}
	if m.Health != 0 {
		i = encodeVarintSnowdata(dAtA, i, uint64(m.Health))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSnowdata(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSnowdata(dAtA []byte, offset int, v uint64) int {
	offset -= sovSnowdata(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Snowdata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSnowdata(uint64(l))
	}
	if m.Health != 0 {
		n += 1 + sovSnowdata(uint64(m.Health))
	}
	if m.Fighting != 0 {
		n += 1 + sovSnowdata(uint64(m.Fighting))
	}
	return n
}

func sovSnowdata(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSnowdata(x uint64) (n int) {
	return sovSnowdata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Snowdata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnowdata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snowdata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snowdata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnowdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnowdata
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSnowdata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			m.Health = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnowdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Health |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fighting", wireType)
			}
			m.Fighting = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnowdata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fighting |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnowdata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnowdata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnowdata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnowdata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnowdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnowdata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSnowdata
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSnowdata
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSnowdata
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSnowdata        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnowdata          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSnowdata = fmt.Errorf("proto: unexpected end of group")
)
